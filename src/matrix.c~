void init_matrix(int **matrix, int row, int line) {
	matrix = malloc ( sizeof(int *) * line);
	memset (matrix, 0, sizeof(int *) * line);
	
	matrix_base = malloc ( sizeof(int) * row * line);
	memset (matrix_base, 0, sizeof(int) * row * line);

	for(int i = 0; i < line; i++) {
		matrix[i] = matrix_base + i * row;
	}
}

void free_square_matrix(int **matrix, int matrix_length) {
	free(matrix_base);
	free(matrix);
}

int split_string_to_int(char *target, char *split, int *ret, int ret_size) {
	char *p;
	int i = 1;

	printf("input %s\n", target);

	p = strtok(target, split);
	ret[0] = atoi(p);

	while( p != NULL) {
		p = strtok(NULL, split);

		if(p != NULL) {
			printf("%s\n", p);

			if(i > ret_size) {
				return 0;
			}

			ret[i] = atoi(p);
			i++;
		}
	}

	return 1;
}

int get_matrix_elements(int **matrix, char *input, int now_line, int max_row) {

	if ( !(split_string_to_int (input, " ", matrix[now_line], max_row)) ) {
		printf("Max Matrix Length is %d, this Matrix[%s] Length is over\n", row_max, input);
		return 0;
	}
	
	return 1;
}
