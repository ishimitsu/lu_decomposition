#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INPUT_MATRIX "input_matrix.txt"
#define BUF_LEN 1024

int *matrix_base; // for free matrix

int get_matrix_line (char *input) {
	return atoi(input);
}

void init_square_matrix(int **matrix, int matrix_length) {
	matrix = malloc ( sizeof(int *) * matrix_length);
	memset (matrix, 0, sizeof(int *) * matrix_length);
	
	matrix_base = malloc ( sizeof(int) * matrix_length * matrix_length);
	memset (matrix_base, 0, sizeof(int) * matrix_length * matrix_length);

	for(int i = 0; i < matrix_length; i++) {
		matrix[i] = matrix_base + i * matrix_length;
	}
}

void free_square_matrix(int **matrix, int matrix_length) {
	free(matrix_base);
	free(matrix);
}

int split_string_to_int(char *target, char *split, int *ret, int ret_size) {
	char *p;
	int i = 1;

	printf("input %s\n", target);

	p = strtok(target, split);
	ret[0] = atoi(p);

	while( p != NULL) {
		p = strtok(NULL, split);

		if(p != NULL) {
			printf("%s\n", p);

			if(i > ret_size) {
				return 0;
			}

			ret[i] = atoi(p);
			i++;
		}
	}

	return 1;
}

int get_matrix_elements(int **matrix, char *input, int now_line, int matrix_length) {
	int row_max, line_max;

	row_max = line_max = matrix_length;

	if(now_line > line_max) {
		printf("Max Matrix Length is %d, This matrix Line %d is over\n", 
		       line_max, now_line);
		return 0;
	}

	if ( !(split_string_to_int (input, " ", matrix[now_line], row_max)) ) {
		printf("Max Matrix Length is %d, this Matrix[%s] Length is over\n", row_max, input);
		return 0;
	}
	
	return 1;
}

int main(void) {
	char input[BUF_LEN];
	int matrix_length = 0;
	int **input_matrix;
	int now_line = 0;

	FILE *fp;
	if ( (fp = fopen(INPUT_MATRIX, "r") ) == NULL ) {
		printf("Error: Open %s\n", INPUT_MATRIX);
		return -1;
	}
	
	while( fgets(input, sizeof(input), fp) != NULL) {

		if(matrix_length == 0) {
			printf("matrix size %s\n", input);
			// initialize square matrix
			matrix_length = get_square_matrix_length(input);
			init_square_matrix(input_matrix, matrix_length);

		} else {
			printf("%s\n", input);
			
			if( !(get_matrix_elements(input_matrix, input, now_line, matrix_length)) ) {
				printf("Invalid Matrix\n");
				return -1;
			}
			now_line++;

		}

	}

/* 	for(int i = 0; i < matrix_length; i++) { */
/* 		for(int j = 0; j < matrix_length; j++) { */
/* 			printf("%d ", input_matrix[i][j]); */
/* 		} */
/* 		printf("\n"); */
/* 	} */


	fclose(fp);
	free_square_matrix(input_matrix, matrix_length);

	return 0;
}

